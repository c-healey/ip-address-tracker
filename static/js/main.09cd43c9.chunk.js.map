{"version":3,"sources":["mapStyles.js","App.jsx","reportWebVitals.ts","index.tsx"],"names":["mapStyles","libraries","mapContainerStyle","width","height","center","lat","lng","options","styles","disableDefaultUI","zoomControl","App","useState","ip","setIp","markers","setMarkers","selected","setSelected","useJsApiLoader","googleMapsApiKey","process","isLoaded","loadError","mapRef","React","useRef","onMapLoad","useCallback","map","current","handleIpify","a","axios","get","data","location","newMarker","time","Date","isp","panTo","setZoom","console","log","className","type","placeholder","onChange","e","target","value","id","onClick","city","region","postalCode","country","timezone","zoom","onLoad","marker","position","icon","path","fillColor","fillOpacity","strokeColor","strokeWeight","scaledSize","window","google","maps","Size","origin","Point","anchor","toISOString","class","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09cd43c9.chunk.js","sourcesContent":["const mapStyles =  [\r\n    {\r\n        \"featureType\": \"all\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"weight\": \"2.00\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"all\",\r\n        \"elementType\": \"geometry.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#9c9c9c\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"all\",\r\n        \"elementType\": \"labels.text\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"on\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"landscape\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#f2f2f2\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"landscape\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ffffff\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"landscape.man_made\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ffffff\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"poi\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"lightness\": 45\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#eeeeee\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road\",\r\n        \"elementType\": \"labels.text.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#7b7b7b\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road\",\r\n        \"elementType\": \"labels.text.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ffffff\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"simplified\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.arterial\",\r\n        \"elementType\": \"labels.icon\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"transit\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#46bcec\"\r\n            },\r\n            {\r\n                \"visibility\": \"on\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#c8d7d4\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"labels.text.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#070707\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"labels.text.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ffffff\"\r\n            }\r\n        ]\r\n    }\r\n]\r\nexport default mapStyles;","import React, { useState } from \"react\";\nimport {\n  GoogleMap,\n  useJsApiLoader,\n  Marker,\n} from \"@react-google-maps/api\";\nimport mapStyles from \"./mapStyles\";\nimport axios from \"axios\";\n\nimport \"./App.scss\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: \"100%\",\n  height: \"70vh\",\n};\nconst center = {\n  lat: 43.653225,\n  lng: -79.383186,\n};\n// snazzymaps.com\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true,\n};\n\nfunction App() {\n  const [ip, setIp] = useState(\"\");\n  const [markers, setMarkers] = useState([]);\n  const [selected, setSelected] = useState(null);\n  const { isLoaded, loadError } = useJsApiLoader({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_KEY,\n    libraries,\n  });\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n  const handleIpify = async () => {\n    try {\n      const { data } = await axios.get(\n        `https://geo.ipify.org/api/v1?apiKey=${process.env.REACT_APP_IPIFY_KEY}&ipAddress=${ip}`\n      );\n\n      const { lat, lng } = data.location;\n      const newMarker = {\n        lat: lat,\n        lng: lng,\n        time: new Date(),\n        isp: data.isp,\n        ip: data.ip,\n        location: data.location,\n      };\n\n      // pan to the location\n      mapRef.current.panTo({ lat, lng });\n      mapRef.current.setZoom(14);\n\n      // add a new marker\n      setMarkers((current) => [...current, newMarker]);\n      setSelected(newMarker);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  if (loadError) return <div>Error loading maps</div>;\n  if (!isLoaded) return <div>Loading maps</div>;\n\n  return (\n    <div className=\"App container-fluid d-flex flex-column align-items-center bg-dark\">\n      <header className=\"header container  d-flex flex-column align-items-center pt-4 px-0 bg-white\">\n        <h1 className=\"title mb-4\">Ip address tracker</h1>\n        <search className=\"input-group mb-3 w-50\">\n          <input\n            type=\"text\"\n            className=\"form-control ip-search radius\"\n            placeholder=\"Search for any IP address or domain\"\n            aria-label=\"Ip Address or domain\"\n            aria-describedby=\"basic-addon2\"\n            onChange={(e) => setIp(e.target.value)}\n          />\n          <span\n            className=\"input-group-text bg-dark border-dark radius\"\n            id=\"basic-addon2\"\n            onClick={() => handleIpify()}\n          >\n            <i className=\"bi bi-chevron-right text-white\"></i>\n            \n          </span>\n        </search>\n\n        <detail className=\"row ip-list-group border radius p-4 \">\n          <div className=\"col-sm ip-list-group-item   \">\n            <h2>IP Address</h2>\n            <p>{selected && selected.ip}</p>\n          </div>\n          <div className=\"col-sm ip-list-group-item\">\n            <h2>location</h2>\n            <p>\n              {selected &&\n                `${selected.location.city} ${selected.location.region}  ${selected.location.postalCode}  ${selected.location.country}`}\n            </p>\n          </div>\n          <div className=\"col-sm ip-list-group-item\">\n            <h2>timezone</h2>\n            <p>{selected && `UTC ${selected.location.timezone}`}</p>\n          </div>\n          <div className=\"col-sm ip-list-group-item\">\n            <h2>ISP</h2>\n            <p>{selected && ` ${selected.isp}`}</p>\n          </div>\n        </detail>\n        </header>\n        <main className=\"container ip-map-container row w-100\">\n          <GoogleMap\n            mapContainerStyle={mapContainerStyle}\n            zoom={8}\n            center={center}\n            options={options}\n            onLoad={onMapLoad}\n          >\n            {markers.map((marker) => {\n              return (\n                <Marker\n                  key={marker.time.toISOString()}\n                  position={{ lat: marker.lat, lng: marker.lng }}\n                  icon={{\n                    path: \"M39.263 7.673c8.897 8.812 8.966 23.168.153 32.065l-.153.153L23 56 6.737 39.89C-2.16 31.079-2.23 16.723 6.584 7.826l.153-.152c9.007-8.922 23.52-8.922 32.526 0zM23 14.435c-5.211 0-9.436 4.185-9.436 9.347S17.79 33.128 23 33.128s9.436-4.184 9.436-9.346S28.21 14.435 23 14.435z\",\n                    fillColor: \"black\",\n                    fillOpacity: 0.9,\n                    strokeColor: \"gold\",\n                    strokeWeight: 1,\n                    scaledSize: new window.google.maps.Size(30, 30),\n                    origin: new window.google.maps.Point(0, 0),\n                    anchor: new window.google.maps.Point(15, 15),\n                  }}\n                  onClick={() => {\n                    setSelected(marker);\n                  }}\n                />\n              );\n            })}\n          </GoogleMap>\n        </main>\n        <footer class=\"attribution\">\n    Challenge by <a href=\"https://www.frontendmentor.io?ref=challenge\" target=\"_blank\">Frontend Mentor</a>. \n    Coded by <a href=\"/\">Catherine Healey</a>.\n  </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}